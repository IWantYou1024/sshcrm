package cn.itcast.web.action.cargo;


import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;

import cn.itcast.domain.cargo.Invoice;
import cn.itcast.domain.cargo.PackingList;
import cn.itcast.domain.cargo.ShippingOrder;
import cn.itcast.domain.sysadmin.User;
import cn.itcast.service.InvoiceService;
import cn.itcast.service.PackingListService;
import cn.itcast.service.ShippingOrderService;
import cn.itcast.utils.DownloadUtil;
import cn.itcast.utils.SysConstant;
import cn.itcast.utils.UtilFuns;
import cn.itcast.web.action.BaseAction;

@Namespace("/cargo")
@Results({ @Result(name = "list", location = "/WEB-INF/pages/cargo/invoice/jInvoiceList.jsp"),
	@Result(name = "toview", location = "/WEB-INF/pages/cargo/invoice/jInvoiceView.jsp"),
	@Result(name = "tocreate", location = "/WEB-INF/pages/cargo/invoice/jInvoiceCreate.jsp"),
	@Result(name = "toupdate", location = "/WEB-INF/pages/cargo/invoice/jInvoiceUpdate.jsp"),
	@Result(name = "success", type = "redirect", location = "invoiceAction_list") })
public class InvoiceAction extends BaseAction<Invoice> {
	
	//注入模型驱动，
	@Override
	public Invoice setModel() {
		return new Invoice();
	}
	
	@Autowired
	private InvoiceService invoiceService;
	
	@Autowired
	private ShippingOrderService  shippingOrderService;
	
	@Autowired
	private PackingListService  packingListService ;
	/**
	 * 分页列表显示
	 * @return
	 * @throws Exception
	 */
	@Action(value="invoiceAction_list")
	public String list() throws Exception {

		Specification<Invoice> spec = new Specification<Invoice>() {
			public Predicate toPredicate(Root<Invoice> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				Predicate p1 = cb.equal(root.get("state").as(Integer.class), 0);
				Predicate p2 = cb.equal(root.get("state").as(Integer.class), 1);
				Predicate p3 = cb.equal(root.get("state").as(Integer.class), 2);
				return cb.or(p1,p2,p3);
			}
		};
		Page<Invoice> page2 = invoiceService.findPage(spec, new PageRequest(page.getPageNo() - 1, page.getPageSize()));
		super.parsePage(page, page2);
		page.setUrl("invoiceAction_list");
		super.push(page);
		return "list";
	}
	/**
	 * 跳转到新增发票页面
	 * @return
	 * @throws Exception
	 */
	@Action(value="invoiceAction_tocreate")
	public String tocreate() throws Exception {	
		Specification<ShippingOrder> spec = new Specification<ShippingOrder>() {		
			@Override
			public Predicate toPredicate(Root<ShippingOrder> root, CriteriaQuery<?> query, CriteriaBuilder cb) {					
				return cb.equal(root.get("state").as(Integer.class), 1);				
			}
		};	
		Page<ShippingOrder> page2 = shippingOrderService.findPage(spec, new PageRequest(page.getPageNo()-1, page.getPageSize()));		
		super.parsePage(page, page2);
		page.setUrl("invoiceAction_insert");
		super.push(page);		
		return "tocreate";
	}
	
	/**
	 * 新增发票,并保存
	 * @return
	 * @throws Exception
	 */
	@Action(value="invoiceAction_insert")
	public String insert() throws Exception {
		
		Invoice invoice = invoiceService.get(model.getId());
		invoice.setBlNo(model.getBlNo());
		invoice.setScNo(model.getScNo());
		invoice.setState(0);
		invoice.setTradeTerms(model.getTradeTerms());
		User user =(User) ServletActionContext.getRequest().getSession().getAttribute(SysConstant.CURRENT_USER_INFO);
		invoice.setCreateBy(user.getId());
		invoice.setCreateDept(user.getDept().getId());
		invoice.setCreateTime(model.getCreateTime());
			
		invoiceService.saveOrUpdate(invoice);
		
		ShippingOrder shippingOrder = shippingOrderService.get(model.getId());
		shippingOrder.setState(2);//修改状态，由待开发票转为已委托
				
		PackingList packingList = packingListService.get(invoice.getId());
		packingList.setInvoiceNo(invoice.getBlNo());
		packingList.setInvoiceDate(invoice.getCreateTime());
		
		packingListService.saveOrUpdate(packingList);
		
		
		return SUCCESS;
	}
	
	/**
	 * 跳转到修改页面
	 * @return
	 * @throws Exception
	 */
	@Action(value="invoiceAction_toupdate")
	public String toupdate() throws Exception {
		Invoice invoice = invoiceService.get(model.getId());
		super.push(invoice);
		
		Specification<ShippingOrder> spec = new Specification<ShippingOrder>() {
			
			@Override
			public Predicate toPredicate(Root<ShippingOrder> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				
				return cb.equal(root.get("shippingOrderId").as(String.class), model.getId());
			}
		};
		List<ShippingOrder> list = shippingOrderService.find(spec);
		super.put("list", list);
		return "toupdate";
	}
	
	/**
	 * 修改并保存
	 * @return
	 * @throws Exception
	 */
	@Action(value="invoiceAction_update")
	public String update() throws Exception {
		Invoice invoice = invoiceService.get(model.getId());
		invoice.setBlNo(model.getBlNo());
		invoice.setScNo(model.getScNo());
		invoice.setTradeTerms(model.getTradeTerms());
		invoice.setCreateBy(model.getCreateBy());
		invoice.setCreateTime(model.getCreateTime());
		invoiceService.saveOrUpdate(invoice);

		return SUCCESS;
	}
	
	/**
	 * 打印
	 * @return
	 * @throws Exception
	 */
	@Action(value="invoiceAction_print")
	public void print() throws Exception {
		
		//查找数据
		//查询原来的装箱单
		PackingList p = packingListService.get(model.getId());
		ShippingOrder order = shippingOrderService.get(model.getId());
		
		//相同厂家的信息一起打印

		Invoice invoice = invoiceService.get(model.getId());
		UtilFuns utilFuns = new UtilFuns();
		HttpServletResponse response = ServletActionContext.getResponse();
		//获取模板文件
		String path = ServletActionContext.getServletContext().getRealPath("/make/xlsprint/tINVOICE.xls");

		FileInputStream is = new FileInputStream(new File(path));
		Workbook workbook = new HSSFWorkbook(is); 
		Sheet sheet = workbook.getSheetAt(0);
		// 设置一些通用变量
		Row nRow = null;
		Cell nCell = null;


		// ==================填充seller数据
		nRow = sheet.getRow(3);
		nCell = nRow.getCell(0);
		if(UtilFuns.isNotEmpty(p.getSeller())){
			nCell.setCellValue(p.getSeller());
		}
		
		// =================获取Buyer数据
		nRow = sheet.getRow(8);
		nCell = nRow.getCell(0);
		if(UtilFuns.isNotEmpty(p.getBuyer())){
			nCell.setCellValue(p.getBuyer());
		}
		
		int rowIndex = 15;
		Row Row = sheet.getRow(rowIndex);
		Row.createCell(0).setCellValue(p.getInvoiceNo());
		Row.createCell(2).setCellValue(UtilFuns.dateTimeFormat(invoice.getCreateTime()));
		Row.createCell(5).setCellValue(invoice.getScNo());			
		Row.createCell(9).setCellValue(invoice.getBlNo());
		
		// =================获取lc No.数据
		rowIndex = 19;
		Row = sheet.getRow(rowIndex);
		Row.createCell(0).setCellValue(order.getLcNo());
		Row.createCell(2).setCellValue("");
		Row.createCell(5).setCellValue("");			
		Row.createCell(6).setCellValue("");
		
		//=============获取marks
		rowIndex = 23;
		Row = sheet.getRow(rowIndex);
		Row.createCell(0).setCellValue(order.getLcNo());
		Row.createCell(1).setCellValue("");				

		ByteArrayOutputStream os = new ByteArrayOutputStream();
		workbook.write(os);
		DownloadUtil downloadUtil = new DownloadUtil();
		downloadUtil.download(os, response, "发票单" + ".xls");

				 
	}
	
	
	/**
	 * 取消
	 * @return
	 * @throws Exception
	 */
	@Action(value="invoiceAction_cancel")
	public String cancel() throws Exception {
		Invoice invoice = invoiceService.get(model.getId());
		invoice.setState(0);//状态由1 修改为2 ，已开发票
		invoiceService.saveOrUpdate(invoice);
		ShippingOrder shippingOrder = shippingOrderService.get(model.getId());
		shippingOrder.setState(1);
		shippingOrderService.saveOrUpdate(shippingOrder);
		PackingList packingList = packingListService.get(invoice.getId());
		packingList.setState(2);
		packingListService.saveOrUpdate(packingList);
		return SUCCESS;
	}
	
	/**
	 * 提交
	 * @return
	 * @throws Exception
	 */
	@Action(value="invoiceAction_submit")
	public String submit() throws Exception {
		Invoice invoice = invoiceService.get(model.getId());
		invoice.setState(1);//状态由0 修改为1 ，已开发票
		invoiceService.saveOrUpdate(invoice);
		ShippingOrder shippingOrder = shippingOrderService.get(model.getId());
		shippingOrder.setState(2);
		shippingOrderService.saveOrUpdate(shippingOrder);
		PackingList packingList = packingListService.get(invoice.getId());
		packingList.setState(3);
		packingListService.saveOrUpdate(packingList);
		return SUCCESS;
	}
	
	/**
	 * 删除一条发票
	 * @return
	 * @throws Exception
	 */
	@Action(value="invoiceAction_delete")
	public String delete() throws Exception {
		
//		invoiceService.deleteById(model.getId());
		Invoice invoice = invoiceService.get(model.getId());
		invoice.setScNo(null);
		invoice.setBlNo(null);
		invoice.setState(null);
		invoice.setTradeTerms(null);
		invoice.setCreateBy(null);
		invoice.setCreateDept(null);
//		invoice.setCreateTime(null);
		invoiceService.saveOrUpdate(invoice);
		ShippingOrder shippingOrder = shippingOrderService.get(model.getId());
		shippingOrder.setState(1);
		shippingOrderService.saveOrUpdate(shippingOrder);
		
		PackingList packingList = packingListService.get(model.getId());
		packingList.setState(2);
		
		return SUCCESS;
	}
	
	/**
	 * 查看
	 * @return
	 * @throws Exception
	 */
	@Action(value="invoiceAction_toview")
	public String toview() throws Exception {
		Invoice invoice = invoiceService.get(model.getId());
		super.push(invoice);

		return "toview";
	}
	

}
